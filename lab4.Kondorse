from collections import defaultdict
from typing import List, Dict


class CondorcetSystem:
    def __init__(self, vote_orders: List[List[str]]):
        # Инициализация объекта CondorcetSystem с переданными списками предпочтений vote_orders
        self.vote_orders = vote_orders

        # Получение уникального списка кандидатов из списков предпочтений
        self.candidates = list(set(candidate for vote_order in vote_orders for candidate in vote_order))

        # Вычисление матрицы попарных предпочтений для всех кандидатов
        self.candidate_pair_values = self.get_pair_values()

    def get_pair_values(self) -> Dict[str, Dict[str, int]]:
        # Создание словаря для хранения значений попарных предпочтений между кандидатами
        candidate_pair_values = defaultdict(dict)
        for first_candidate in self.candidates:
            for second_candidate in self.candidates:
                if first_candidate != second_candidate:
                    # Вычисление значения попарного предпочтения между первым и вторым кандидатами
                    candidate_pair_values[first_candidate][second_candidate] = self.get_pair_value(first_candidate, second_candidate)
        return dict(candidate_pair_values)

    def get_pair_value(self, first_candidate: str, second_candidate: str) -> int:
        # Вычисление разницы в количестве раз, когда первый кандидат был предпочтительнее второго
        times_first_higher = 0
        times_second_higher = 0

        for vote_order in self.vote_orders:
            index_first = vote_order.index(first_candidate)
            index_second = vote_order.index(second_candidate)
            if index_first < index_second:
                times_first_higher += 1
            else:
                times_second_higher += 1

        return times_first_higher - times_second_higher

    def wins(self, candidate: str) -> bool:
        # Определение, побеждает ли данный кандидат при сравнении со всеми остальными
        return all(pair_difference > 0 for pair_difference in self.candidate_pair_values[candidate].values())

    def get_matrix_line(self, first_candidate: str) -> str:
        # Получение строки для матрицы попарных предпочтений, начиная с первого кандидата
        matrix_line = f"{first_candidate: <30}"
        matrix_line += " ".join(f"{self.get_matrix_pair_value(first_candidate, second_candidate): >5}" for second_candidate in self.candidates)
        return matrix_line

    def get_matrix_pair_value(self, first_candidate: str, second_candidate: str) -> int:
        # Получение значения попарного предпочтения между первым и вторым кандидатами
        value = self.candidate_pair_values[first_candidate].get(second_candidate, 0)
        return value

    def __str__(self) -> str:
        # Вывод результата в виде строки
        winners = [candidate for candidate in self.candidates if self.wins(candidate)]
        if len(winners) != 1:
            raise Exception("Невозможно определить победителя")

        winner = winners[0]
        result = f"Победитель: {winner}, т.к. большинство выборщиков предпочитает именно этого кандидата при попарном сравнении с остальными.\n"
        result += "Матрица попарного предпочтения:\n"
        result += "\n".join(self.get_matrix_line(candidate) for candidate in self.candidates)
        return result


# Пример использования
vote_orders = [
    ["A", "B", "C"],
    ["B", "A", "C"],
    ["C", "B", "A"]
]

# Создание экземпляра класса CondorcetSystem и вывод результата
condorcet_system = CondorcetSystem(vote_orders)
print(condorcet_system)
